// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class GoodmakeprescriptionTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //																												//
  //									FUNTIONAL REQUIREMENT RTM ID - (TC-17)										//
  //																												//
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  @Test
  public void goodmakeprescription() {
    // Test name: Good make prescription
    // Step # | name | target | value
    // 1 | open | https://asclepius-client-management.netlify.app/ | 
    driver.get("https://asclepius-client-management.netlify.app/");
    // 2 | click | css=.MuiButton-label | 
    driver.findElement(By.cssSelector(".MuiButton-label")).click();
    // 3 | type | xpath=//div[@id='root']/main/div/div[2]/div/form/div/div/div/input | hotNurseGF
    driver.findElement(By.xpath("//div[@id=\'root\']/main/div/div[2]/div/form/div/div/div/input")).sendKeys("hotNurseGF");
    // 4 | type | xpath=//div[@id='root']/main/div/div[2]/div/form/div[2]/div/div/input | orange
    driver.findElement(By.xpath("//div[@id=\'root\']/main/div/div[2]/div/form/div[2]/div/div/input")).sendKeys("orange");
    // 5 | sendKeys | css=.Mui-focused > .MuiInputBase-input | ${KEY_ENTER}
    driver.findElement(By.cssSelector(".Mui-focused > .MuiInputBase-input")).sendKeys(Keys.ENTER);
    // 6 | verifyElementPresent | css=.nav-btns:nth-child(2) | 
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".nav-btns:nth-child(2)"));
      assert(elements.size() > 0);
    }
    // 7 | click | css=.nav-btns:nth-child(2) | 
    driver.findElement(By.cssSelector(".nav-btns:nth-child(2)")).click();
    // 8 | verifyText | css=label:nth-child(3) |  1001, Yani Cho
    assertThat(driver.findElement(By.cssSelector("label:nth-child(3)")).getText(), is(" 1001, Yani Cho"));
    // 9 | click | css=label:nth-child(3) > .selector | 
    driver.findElement(By.cssSelector("label:nth-child(3) > .selector")).click();
    // 10 | click | css=.css-ackcql | 
    driver.findElement(By.cssSelector(".css-ackcql")).click();
    // 11 | pause | 1000 | 
    try {
      Thread.sleep(1000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    // 12 | click | id=react-select-2-option-0 | 
    driver.findElement(By.id("react-select-2-option-0")).click();
    // 13 | type | xpath=//div[@id='root']/main/div/div[2]/div[2]/div/form/div[2]/div[2]/input | 1
    driver.findElement(By.xpath("//div[@id=\'root\']/main/div/div[2]/div[2]/div/form/div[2]/div[2]/input")).sendKeys("1");
    // 14 | verifyValue | xpath=//div[@id='root']/main/div/div[2]/div[2]/div/form/div[2]/div[2]/input | 1
    {
      String value = driver.findElement(By.xpath("//div[@id=\'root\']/main/div/div[2]/div[2]/div/form/div[2]/div[2]/input")).getAttribute("value");
      assertThat(value, is("1"));
    }
    // 15 | type | xpath=//div[@id='root']/main/div/div[2]/div[2]/div/form/div[2]/div[3]/input | test test test
    driver.findElement(By.xpath("//div[@id=\'root\']/main/div/div[2]/div[2]/div/form/div[2]/div[3]/input")).sendKeys("test test test");
    // 16 | verifyValue | xpath=//div[@id='root']/main/div/div[2]/div[2]/div/form/div[2]/div[3]/input | test test test
    {
      String value = driver.findElement(By.xpath("//div[@id=\'root\']/main/div/div[2]/div[2]/div/form/div[2]/div[3]/input")).getAttribute("value");
      assertThat(value, is("test test test"));
    }
    // 17 | click | css=.MuiButton-contained > .MuiButton-label | 
    driver.findElement(By.cssSelector(".MuiButton-contained > .MuiButton-label")).click();
    // 18 | verifyText | css=p:nth-child(4) | Medication: Ibuprofen
    assertThat(driver.findElement(By.cssSelector("p:nth-child(4)")).getText(), is("Medication: Ibuprofen"));
    // 19 | click | css=.MuiButtonBase-root:nth-child(8) > .MuiButton-label | 
    driver.findElement(By.cssSelector(".MuiButtonBase-root:nth-child(8) > .MuiButton-label")).click();
    // 20 | verifyText | css=p | Prescription order has been made!
    assertThat(driver.findElement(By.cssSelector("p")).getText(), is("Prescription order has been made!"));
    // 21 | click | css=.MuiButton-contained > .MuiButton-label | 
    driver.findElement(By.cssSelector(".MuiButton-contained > .MuiButton-label")).click();
    // 22 | click | css=.nav-btns:nth-child(1) | 
    driver.findElement(By.cssSelector(".nav-btns:nth-child(1)")).click();
    // 23 | click | css=.MuiButtonBase-root:nth-child(2) h3:nth-child(2) | 
    driver.findElement(By.cssSelector(".MuiButtonBase-root:nth-child(2) h3:nth-child(2)")).click();
    // 24 | verifyText | css=.diagnoses-table:nth-child(3) td:nth-child(2) | test test test
    assertThat(driver.findElement(By.cssSelector(".diagnoses-table:nth-child(3) td:nth-child(2)")).getText(), is("test test test"));
    // 25 | close |  | 
    driver.close();
  }
}
